//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from dyme.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class dymeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, STRING=49, BOOLEAN=50, INTEGER=51, FLOAT=52, 
		IDENTIFIER=53, WHITESPACE=54, COMMENT=55, LINE_COMMENT=56;
	public const int
		RULE_block = 0, RULE_loopblock = 1, RULE_stmt = 2, RULE_matchparams = 3, 
		RULE_matchparam = 4, RULE_enums = 5, RULE_expr = 6, RULE_option = 7, RULE_params = 8, 
		RULE_args = 9, RULE_assignArgs = 10, RULE_atom = 11;
	public static readonly string[] ruleNames = {
		"block", "loopblock", "stmt", "matchparams", "matchparam", "enums", "expr", 
		"option", "params", "args", "assignArgs", "atom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'return'", "';'", "'}'", "'break'", "'continue'", "'let'", 
		"'='", "'for'", "','", "'::'", "'while'", "'if'", "'else'", "'import'", 
		"'match'", "'mod'", "'type'", "'class'", "'('", "')'", "'.'", "'=>'", 
		"'|'", "'^'", "'->'", "'-?>'", "'*'", "'/'", "'%'", "'+'", "'-'", "'&'", 
		"'=='", "'!='", "'>'", "'>='", "'<'", "'<='", "'and'", "'or'", "'new'", 
		"'['", "']'", "'fn'", "'-->'", "'|>'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "STRING", "BOOLEAN", "INTEGER", "FLOAT", "IDENTIFIER", "WHITESPACE", 
		"COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "dyme.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static dymeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public dymeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public dymeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	 
		public BlockContext() { }
		public virtual void CopyFrom(BlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ScopedBlockContext : BlockContext {
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ScopedBlockContext(BlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterScopedBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitScopedBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScopedBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 0, RULE_block);
		int _la;
		try {
			_localctx = new ScopedBlockContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 24; Match(T__0);
			State = 28;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__8) | (1L << T__11) | (1L << T__12) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__30) | (1L << T__31) | (1L << T__41) | (1L << T__42) | (1L << T__44) | (1L << STRING) | (1L << BOOLEAN) | (1L << INTEGER) | (1L << FLOAT) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 25; stmt();
				}
				}
				State = 30;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 31; Match(T__1);
				State = 32; expr(0);
				State = 33; Match(T__2);
				}
			}

			State = 37; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopblockContext : ParserRuleContext {
		public LoopblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopblock; } }
	 
		public LoopblockContext() { }
		public virtual void CopyFrom(LoopblockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LoopBlockContext : LoopblockContext {
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public LoopBlockContext(LoopblockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterLoopBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitLoopBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopblockContext loopblock() {
		LoopblockContext _localctx = new LoopblockContext(Context, State);
		EnterRule(_localctx, 2, RULE_loopblock);
		int _la;
		try {
			_localctx = new LoopBlockContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 39; Match(T__0);
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__8) | (1L << T__11) | (1L << T__12) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__30) | (1L << T__31) | (1L << T__41) | (1L << T__42) | (1L << T__44) | (1L << STRING) | (1L << BOOLEAN) | (1L << INTEGER) | (1L << FLOAT) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 40; stmt();
				}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 46; Match(T__4);
				State = 47; Match(T__2);
				}
			}

			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 50; Match(T__5);
				State = 51; Match(T__2);
				}
			}

			State = 54; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
	 
		public StmtContext() { }
		public virtual void CopyFrom(StmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ImportStmtContext : StmtContext {
		public ITerminalNode IDENTIFIER() { return GetToken(dymeParser.IDENTIFIER, 0); }
		public ImportStmtContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterImportStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitImportStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStmtContext : StmtContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStmtContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassStmtContext : StmtContext {
		public ITerminalNode IDENTIFIER() { return GetToken(dymeParser.IDENTIFIER, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public ClassStmtContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterClassStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitClassStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeStmtContext : StmtContext {
		public ITerminalNode IDENTIFIER() { return GetToken(dymeParser.IDENTIFIER, 0); }
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public TypeStmtContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterTypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitTypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclarationStmtContext : StmtContext {
		public ITerminalNode IDENTIFIER() { return GetToken(dymeParser.IDENTIFIER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DeclarationStmtContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterDeclarationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitDeclarationStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprStmtContext : StmtContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprStmtContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterExprStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitExprStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStmtContext : StmtContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public IfStmtContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MatchStmtContext : StmtContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public MatchparamsContext matchparams() {
			return GetRuleContext<MatchparamsContext>(0);
		}
		public MatchStmtContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterMatchStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitMatchStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccessAssignmentStmtContext : StmtContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(dymeParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(dymeParser.IDENTIFIER, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AccessAssignmentStmtContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterAccessAssignmentStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitAccessAssignmentStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessAssignmentStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuleStmtContext : StmtContext {
		public ITerminalNode IDENTIFIER() { return GetToken(dymeParser.IDENTIFIER, 0); }
		public ModuleStmtContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterModuleStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitModuleStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EnumStmtContext : StmtContext {
		public ITerminalNode IDENTIFIER() { return GetToken(dymeParser.IDENTIFIER, 0); }
		public EnumsContext enums() {
			return GetRuleContext<EnumsContext>(0);
		}
		public EnumStmtContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterEnumStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitEnumStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachStmtContext : StmtContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(dymeParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(dymeParser.IDENTIFIER, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForEachStmtContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterForEachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitForEachStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentStmtContext : StmtContext {
		public ITerminalNode IDENTIFIER() { return GetToken(dymeParser.IDENTIFIER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentStmtContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterAssignmentStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitAssignmentStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_stmt);
		int _la;
		try {
			int _alt;
			State = 141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new DeclarationStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 56; Match(T__6);
				State = 57; Match(IDENTIFIER);
				State = 58; Match(T__7);
				State = 59; expr(0);
				State = 60; Match(T__2);
				}
				break;
			case 2:
				_localctx = new ForEachStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 62; Match(T__8);
				State = 63; Match(IDENTIFIER);
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 64; Match(T__9);
					State = 65; Match(IDENTIFIER);
					}
				}

				State = 68; Match(T__10);
				State = 69; expr(0);
				State = 70; block();
				}
				break;
			case 3:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 72; Match(T__11);
				State = 73; expr(0);
				State = 74; block();
				}
				break;
			case 4:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 76; Match(T__12);
				State = 77; expr(0);
				State = 78; block();
				State = 86;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 79; Match(T__13);
						State = 80; Match(T__12);
						State = 81; expr(0);
						State = 82; block();
						}
						} 
					}
					State = 88;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__13) {
					{
					State = 89; Match(T__13);
					State = 90; block();
					}
				}

				}
				break;
			case 5:
				_localctx = new ImportStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 93; Match(T__14);
				State = 94; Match(IDENTIFIER);
				State = 95; Match(T__2);
				}
				break;
			case 6:
				_localctx = new MatchStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 96; Match(T__15);
				State = 97; expr(0);
				State = 98; Match(T__0);
				State = 99; matchparams();
				State = 100; Match(T__3);
				}
				break;
			case 7:
				_localctx = new ModuleStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 102; Match(T__16);
				State = 103; Match(IDENTIFIER);
				}
				break;
			case 8:
				_localctx = new TypeStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 104; Match(T__17);
				State = 105; Match(IDENTIFIER);
				State = 106; Match(T__7);
				State = 107; args();
				State = 108; Match(T__2);
				}
				break;
			case 9:
				_localctx = new EnumStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 110; Match(T__17);
				State = 111; Match(IDENTIFIER);
				State = 112; Match(T__7);
				State = 113; enums();
				State = 114; Match(T__2);
				}
				break;
			case 10:
				_localctx = new ClassStmtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 116; Match(T__18);
				State = 117; Match(IDENTIFIER);
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19) {
					{
					State = 118; Match(T__19);
					State = 119; args();
					State = 120; Match(T__20);
					}
				}

				State = 124; Match(T__7);
				State = 125; block();
				}
				break;
			case 11:
				_localctx = new AssignmentStmtContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 126; Match(IDENTIFIER);
				State = 127; Match(T__7);
				State = 128; expr(0);
				State = 129; Match(T__2);
				}
				break;
			case 12:
				_localctx = new AccessAssignmentStmtContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 131; Match(IDENTIFIER);
				State = 132; Match(T__21);
				State = 133; Match(IDENTIFIER);
				State = 134; Match(T__7);
				State = 135; expr(0);
				State = 136; Match(T__2);
				}
				break;
			case 13:
				_localctx = new ExprStmtContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 138; expr(0);
				State = 139; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchparamsContext : ParserRuleContext {
		public MatchparamContext[] matchparam() {
			return GetRuleContexts<MatchparamContext>();
		}
		public MatchparamContext matchparam(int i) {
			return GetRuleContext<MatchparamContext>(i);
		}
		public MatchparamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchparams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterMatchparams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitMatchparams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchparams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchparamsContext matchparams() {
		MatchparamsContext _localctx = new MatchparamsContext(Context, State);
		EnterRule(_localctx, 6, RULE_matchparams);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; matchparam();
			{
			State = 144; Match(T__9);
			State = 145; matchparam();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchparamContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MatchparamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchparam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterMatchparam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitMatchparam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchparam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchparamContext matchparam() {
		MatchparamContext _localctx = new MatchparamContext(Context, State);
		EnterRule(_localctx, 8, RULE_matchparam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; expr(0);
			State = 148; Match(T__22);
			State = 149; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumsContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(dymeParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(dymeParser.IDENTIFIER, i);
		}
		public EnumsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enums; } }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterEnums(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitEnums(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnums(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumsContext enums() {
		EnumsContext _localctx = new EnumsContext(Context, State);
		EnterRule(_localctx, 10, RULE_enums);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; Match(IDENTIFIER);
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 152; Match(T__23);
				State = 153; Match(IDENTIFIER);
				}
				}
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__23 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AccessObjectFnExprContext : ExprContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(dymeParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(dymeParser.IDENTIFIER, i);
		}
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public AccessObjectFnExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterAccessObjectFnExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitAccessObjectFnExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessObjectFnExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncContext : ExprContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public FuncContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewClassObjExprContext : ExprContext {
		public ITerminalNode IDENTIFIER() { return GetToken(dymeParser.IDENTIFIER, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public NewClassObjExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterNewClassObjExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitNewClassObjExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewClassObjExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeCheckExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(dymeParser.IDENTIFIER, 0); }
		public TypeCheckExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterTypeCheckExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitTypeCheckExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeCheckExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalExprContext : ExprContext {
		public IToken operatorToken;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ConditionalExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterConditionalExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitConditionalExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OptionContext option() {
			return GetRuleContext<OptionContext>(0);
		}
		public RangeExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterRangeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitRangeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExprContext : ExprContext {
		public IToken operatorToken;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnaryExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexExprContext : ExprContext {
		public ITerminalNode IDENTIFIER() { return GetToken(dymeParser.IDENTIFIER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IndexExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterIndexExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitIndexExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallContext : ExprContext {
		public ITerminalNode IDENTIFIER() { return GetToken(dymeParser.IDENTIFIER, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public FuncCallContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExprContext : ExprContext {
		public IToken operatorToken;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MultiplicativeExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomicExprContext : ExprContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public AtomicExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterAtomicExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitAtomicExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExponentialExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExponentialExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterExponentialExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitExponentialExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponentialExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExprContext : ExprContext {
		public IToken operatorToken;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AdditiveExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterAdditiveExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitAdditiveExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExprContext : ExprContext {
		public ITerminalNode IDENTIFIER() { return GetToken(dymeParser.IDENTIFIER, 0); }
		public AssignArgsContext assignArgs() {
			return GetRuleContext<AssignArgsContext>(0);
		}
		public NewExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterNewExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitNewExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(dymeParser.IDENTIFIER, 0); }
		public CastExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterCastExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitCastExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InListExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public InListExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterInListExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitInListExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInListExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParenthesizedExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListExprContext : ExprContext {
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ListExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterListExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitListExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccessObjectExprContext : ExprContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(dymeParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(dymeParser.IDENTIFIER, i);
		}
		public AccessObjectExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterAccessObjectExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitAccessObjectExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessObjectExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TestExprContext : ExprContext {
		public IToken operatorToken;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public TestExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterTestExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitTestExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				_localctx = new ParenthesizedExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 159; Match(T__19);
				State = 160; expr(0);
				State = 161; Match(T__20);
				}
				break;
			case 2:
				{
				_localctx = new UnaryExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 163;
				((UnaryExprContext)_localctx).operatorToken = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__30 || _la==T__31) ) {
					((UnaryExprContext)_localctx).operatorToken = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 164; expr(13);
				}
				break;
			case 3:
				{
				_localctx = new NewExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 165; Match(T__41);
				State = 166; Match(IDENTIFIER);
				State = 171;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 167; Match(T__0);
					State = 168; assignArgs();
					State = 169; Match(T__3);
					}
					break;
				}
				}
				break;
			case 4:
				{
				_localctx = new NewClassObjExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 173; Match(T__41);
				State = 174; Match(IDENTIFIER);
				State = 175; Match(T__19);
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__19) | (1L << T__30) | (1L << T__31) | (1L << T__41) | (1L << T__42) | (1L << T__44) | (1L << STRING) | (1L << BOOLEAN) | (1L << INTEGER) | (1L << FLOAT) | (1L << IDENTIFIER))) != 0)) {
					{
					State = 176; @params();
					}
				}

				State = 179; Match(T__20);
				}
				break;
			case 5:
				{
				_localctx = new AccessObjectExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 180; Match(IDENTIFIER);
				State = 181; Match(T__21);
				State = 182; Match(IDENTIFIER);
				}
				break;
			case 6:
				{
				_localctx = new AccessObjectFnExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 183; Match(IDENTIFIER);
				State = 184; Match(T__21);
				State = 196;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 185; Match(IDENTIFIER);
					State = 187;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						State = 186; Match(T__19);
						}
						break;
					}
					State = 189; @params();
					State = 191;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						State = 190; Match(T__20);
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 193; Match(IDENTIFIER);
					State = 194; Match(T__19);
					State = 195; Match(T__20);
					}
					break;
				}
				}
				break;
			case 7:
				{
				_localctx = new IndexExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 198; Match(IDENTIFIER);
				State = 199; Match(T__42);
				State = 200; expr(0);
				State = 201; Match(T__43);
				}
				break;
			case 8:
				{
				_localctx = new FuncCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 203; Match(IDENTIFIER);
				State = 204; Match(T__19);
				State = 205; Match(T__20);
				}
				break;
			case 9:
				{
				_localctx = new FuncContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 206; Match(T__44);
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 207; args();
					}
				}

				State = 210; block();
				}
				break;
			case 10:
				{
				_localctx = new ListExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 211; Match(T__42);
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__19) | (1L << T__30) | (1L << T__31) | (1L << T__41) | (1L << T__42) | (1L << T__44) | (1L << STRING) | (1L << BOOLEAN) | (1L << INTEGER) | (1L << FLOAT) | (1L << IDENTIFIER))) != 0)) {
					{
					State = 212; @params();
					}
				}

				State = 215; Match(T__43);
				}
				break;
			case 11:
				{
				_localctx = new AtomicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 216; atom();
				}
				break;
			case 12:
				{
				_localctx = new FuncCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 217; Match(IDENTIFIER);
				State = 219;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 218; Match(T__19);
					}
					break;
				}
				State = 221; @params();
				State = 223;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 222; Match(T__20);
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 263;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 261;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						_localctx = new ExponentialExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 227;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 228; Match(T__24);
						State = 229; expr(21);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 230;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 231;
						((MultiplicativeExprContext)_localctx).operatorToken = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__27) | (1L << T__28) | (1L << T__29))) != 0)) ) {
							((MultiplicativeExprContext)_localctx).operatorToken = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 232; expr(18);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 233;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 234;
						((AdditiveExprContext)_localctx).operatorToken = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__30) | (1L << T__31) | (1L << T__32))) != 0)) ) {
							((AdditiveExprContext)_localctx).operatorToken = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 235; expr(17);
						}
						break;
					case 4:
						{
						_localctx = new ConditionalExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 236;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 237;
						((ConditionalExprContext)_localctx).operatorToken = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38))) != 0)) ) {
							((ConditionalExprContext)_localctx).operatorToken = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 238; expr(16);
						}
						break;
					case 5:
						{
						_localctx = new TestExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 239;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 240;
						((TestExprContext)_localctx).operatorToken = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__39 || _la==T__40) ) {
							((TestExprContext)_localctx).operatorToken = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 241; expr(15);
						}
						break;
					case 6:
						{
						_localctx = new InListExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 242;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 243; Match(T__10);
						State = 244; expr(7);
						}
						break;
					case 7:
						{
						_localctx = new CastExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 245;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 246; Match(T__25);
						State = 247; Match(T__19);
						State = 248; Match(IDENTIFIER);
						State = 249; Match(T__20);
						}
						break;
					case 8:
						{
						_localctx = new TypeCheckExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 250;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 251; Match(T__26);
						State = 252; Match(T__19);
						State = 253; Match(IDENTIFIER);
						State = 254; Match(T__20);
						}
						break;
					case 9:
						{
						_localctx = new RangeExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 255;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 256; Match(T__45);
						State = 257; expr(0);
						State = 259;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
						case 1:
							{
							State = 258; option();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 265;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 14, RULE_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; Match(T__46);
			State = 267; expr(0);
			{
			State = 268; Match(T__23);
			State = 269; expr(0);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 16, RULE_params);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; expr(0);
			State = 276;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 272; Match(T__9);
					State = 273; expr(0);
					}
					} 
				}
				State = 278;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(dymeParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(dymeParser.IDENTIFIER, i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 18, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; Match(IDENTIFIER);
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 280; Match(T__9);
				State = 281; Match(IDENTIFIER);
				}
				}
				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignArgsContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(dymeParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(dymeParser.IDENTIFIER, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AssignArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterAssignArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitAssignArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignArgsContext assignArgs() {
		AssignArgsContext _localctx = new AssignArgsContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287; Match(IDENTIFIER);
			State = 288; Match(T__47);
			State = 289; expr(0);
			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 290; Match(T__9);
				State = 291; Match(IDENTIFIER);
				State = 292; Match(T__47);
				State = 293; expr(0);
				}
				}
				State = 298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntegerAtomContext : AtomContext {
		public ITerminalNode INTEGER() { return GetToken(dymeParser.INTEGER, 0); }
		public IntegerAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterIntegerAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitIntegerAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringAtomContext : AtomContext {
		public ITerminalNode STRING() { return GetToken(dymeParser.STRING, 0); }
		public StringAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterStringAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitStringAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanAtomContext : AtomContext {
		public ITerminalNode BOOLEAN() { return GetToken(dymeParser.BOOLEAN, 0); }
		public BooleanAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterBooleanAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitBooleanAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatAtomContext : AtomContext {
		public ITerminalNode FLOAT() { return GetToken(dymeParser.FLOAT, 0); }
		public FloatAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterFloatAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitFloatAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierAtomContext : AtomContext {
		public ITerminalNode IDENTIFIER() { return GetToken(dymeParser.IDENTIFIER, 0); }
		public IdentifierAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.EnterIdentifierAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IdymeListener typedListener = listener as IdymeListener;
			if (typedListener != null) typedListener.ExitIdentifierAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdymeVisitor<TResult> typedVisitor = visitor as IdymeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 22, RULE_atom);
		try {
			State = 304;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				_localctx = new IntegerAtomContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 299; Match(INTEGER);
				}
				break;
			case FLOAT:
				_localctx = new FloatAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 300; Match(FLOAT);
				}
				break;
			case IDENTIFIER:
				_localctx = new IdentifierAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 301; Match(IDENTIFIER);
				}
				break;
			case BOOLEAN:
				_localctx = new BooleanAtomContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 302; Match(BOOLEAN);
				}
				break;
			case STRING:
				_localctx = new StringAtomContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 303; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 20);
		case 1: return Precpred(Context, 17);
		case 2: return Precpred(Context, 16);
		case 3: return Precpred(Context, 15);
		case 4: return Precpred(Context, 14);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 19);
		case 7: return Precpred(Context, 18);
		case 8: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ':', '\x135', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\x3', 
		'\x2', '\a', '\x2', '\x1D', '\n', '\x2', '\f', '\x2', '\xE', '\x2', ' ', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '&', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\a', '\x3', ',', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '/', 
		'\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x33', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x37', '\n', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\x45', '\n', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\a', '\x4', 'W', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'Z', '\v', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '^', '\n', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '}', '\n', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x90', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x6', '\a', '\x9D', '\n', '\a', '\r', '\a', '\xE', '\a', '\x9E', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', '\xAE', '\n', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xB4', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\xBE', '\n', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '\xC2', '\n', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '\xC7', '\n', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xD3', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xD8', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xDE', '\n', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xE2', '\n', '\b', '\x5', 
		'\b', '\xE4', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '\x106', '\n', '\b', '\a', '\b', '\x108', '\n', 
		'\b', '\f', '\b', '\xE', '\b', '\x10B', '\v', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\a', '\n', '\x115', '\n', '\n', '\f', '\n', '\xE', '\n', 
		'\x118', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 
		'\x11D', '\n', '\v', '\f', '\v', '\xE', '\v', '\x120', '\v', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\a', '\f', '\x129', '\n', '\f', '\f', '\f', '\xE', '\f', 
		'\x12C', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '\x133', '\n', '\r', '\x3', '\r', '\x2', '\x3', 
		'\xE', '\xE', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x2', '\a', '\x3', '\x2', '!', '\"', '\x3', '\x2', 
		'\x1E', ' ', '\x3', '\x2', '!', '#', '\x3', '\x2', '$', ')', '\x3', '\x2', 
		'*', '+', '\x2', '\x163', '\x2', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x4', 
		')', '\x3', '\x2', '\x2', '\x2', '\x6', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x91', '\x3', '\x2', '\x2', '\x2', '\n', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x99', '\x3', '\x2', '\x2', '\x2', '\xE', '\xE3', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x111', '\x3', '\x2', '\x2', '\x2', '\x14', '\x119', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x121', '\x3', '\x2', '\x2', '\x2', '\x18', '\x132', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x1E', '\a', '\x3', '\x2', '\x2', 
		'\x1B', '\x1D', '\x5', '\x6', '\x4', '\x2', '\x1C', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', ' ', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1C', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', '%', '\x3', '\x2', '\x2', '\x2', ' ', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '!', '\"', '\a', '\x4', '\x2', '\x2', '\"', '#', '\x5', '\xE', 
		'\b', '\x2', '#', '$', '\a', '\x5', '\x2', '\x2', '$', '&', '\x3', '\x2', 
		'\x2', '\x2', '%', '!', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x3', '\x2', 
		'\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', 
		'\x6', '\x2', '\x2', '(', '\x3', '\x3', '\x2', '\x2', '\x2', ')', '-', 
		'\a', '\x3', '\x2', '\x2', '*', ',', '\x5', '\x6', '\x4', '\x2', '+', 
		'*', '\x3', '\x2', '\x2', '\x2', ',', '/', '\x3', '\x2', '\x2', '\x2', 
		'-', '+', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x32', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x31', '\a', '\a', '\x2', '\x2', '\x31', '\x33', '\a', 
		'\x5', '\x2', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x33', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x35', '\a', '\b', '\x2', '\x2', '\x35', '\x37', '\a', 
		'\x5', '\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x39', '\a', '\x6', '\x2', '\x2', '\x39', '\x5', '\x3', 
		'\x2', '\x2', '\x2', ':', ';', '\a', '\t', '\x2', '\x2', ';', '<', '\a', 
		'\x37', '\x2', '\x2', '<', '=', '\a', '\n', '\x2', '\x2', '=', '>', '\x5', 
		'\xE', '\b', '\x2', '>', '?', '\a', '\x5', '\x2', '\x2', '?', '\x90', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', '\v', '\x2', '\x2', '\x41', 
		'\x44', '\a', '\x37', '\x2', '\x2', '\x42', '\x43', '\a', '\f', '\x2', 
		'\x2', '\x43', '\x45', '\a', '\x37', '\x2', '\x2', '\x44', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x46', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\a', '\r', '\x2', '\x2', 
		'G', 'H', '\x5', '\xE', '\b', '\x2', 'H', 'I', '\x5', '\x2', '\x2', '\x2', 
		'I', '\x90', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', '\xE', '\x2', 
		'\x2', 'K', 'L', '\x5', '\xE', '\b', '\x2', 'L', 'M', '\x5', '\x2', '\x2', 
		'\x2', 'M', '\x90', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '\xF', 
		'\x2', '\x2', 'O', 'P', '\x5', '\xE', '\b', '\x2', 'P', 'X', '\x5', '\x2', 
		'\x2', '\x2', 'Q', 'R', '\a', '\x10', '\x2', '\x2', 'R', 'S', '\a', '\xF', 
		'\x2', '\x2', 'S', 'T', '\x5', '\xE', '\b', '\x2', 'T', 'U', '\x5', '\x2', 
		'\x2', '\x2', 'U', 'W', '\x3', '\x2', '\x2', '\x2', 'V', 'Q', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'Z', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', ']', '\x3', '\x2', 
		'\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\a', '\x10', 
		'\x2', '\x2', '\\', '^', '\x5', '\x2', '\x2', '\x2', ']', '[', '\x3', 
		'\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', '\x90', 
		'\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '\x11', '\x2', '\x2', '`', 
		'\x61', '\a', '\x37', '\x2', '\x2', '\x61', '\x90', '\a', '\x5', '\x2', 
		'\x2', '\x62', '\x63', '\a', '\x12', '\x2', '\x2', '\x63', '\x64', '\x5', 
		'\xE', '\b', '\x2', '\x64', '\x65', '\a', '\x3', '\x2', '\x2', '\x65', 
		'\x66', '\x5', '\b', '\x5', '\x2', '\x66', 'g', '\a', '\x6', '\x2', '\x2', 
		'g', '\x90', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\a', '\x13', '\x2', 
		'\x2', 'i', '\x90', '\a', '\x37', '\x2', '\x2', 'j', 'k', '\a', '\x14', 
		'\x2', '\x2', 'k', 'l', '\a', '\x37', '\x2', '\x2', 'l', 'm', '\a', '\n', 
		'\x2', '\x2', 'm', 'n', '\x5', '\x14', '\v', '\x2', 'n', 'o', '\a', '\x5', 
		'\x2', '\x2', 'o', '\x90', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', 
		'\x14', '\x2', '\x2', 'q', 'r', '\a', '\x37', '\x2', '\x2', 'r', 's', 
		'\a', '\n', '\x2', '\x2', 's', 't', '\x5', '\f', '\a', '\x2', 't', 'u', 
		'\a', '\x5', '\x2', '\x2', 'u', '\x90', '\x3', '\x2', '\x2', '\x2', 'v', 
		'w', '\a', '\x15', '\x2', '\x2', 'w', '|', '\a', '\x37', '\x2', '\x2', 
		'x', 'y', '\a', '\x16', '\x2', '\x2', 'y', 'z', '\x5', '\x14', '\v', '\x2', 
		'z', '{', '\a', '\x17', '\x2', '\x2', '{', '}', '\x3', '\x2', '\x2', '\x2', 
		'|', 'x', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', 
		'}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\a', '\n', '\x2', 
		'\x2', '\x7F', '\x90', '\x5', '\x2', '\x2', '\x2', '\x80', '\x81', '\a', 
		'\x37', '\x2', '\x2', '\x81', '\x82', '\a', '\n', '\x2', '\x2', '\x82', 
		'\x83', '\x5', '\xE', '\b', '\x2', '\x83', '\x84', '\a', '\x5', '\x2', 
		'\x2', '\x84', '\x90', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\a', 
		'\x37', '\x2', '\x2', '\x86', '\x87', '\a', '\x18', '\x2', '\x2', '\x87', 
		'\x88', '\a', '\x37', '\x2', '\x2', '\x88', '\x89', '\a', '\n', '\x2', 
		'\x2', '\x89', '\x8A', '\x5', '\xE', '\b', '\x2', '\x8A', '\x8B', '\a', 
		'\x5', '\x2', '\x2', '\x8B', '\x90', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8D', '\x5', '\xE', '\b', '\x2', '\x8D', '\x8E', '\a', '\x5', '\x2', 
		'\x2', '\x8E', '\x90', '\x3', '\x2', '\x2', '\x2', '\x8F', ':', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '@', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'J', '\x3', '\x2', '\x2', '\x2', '\x8F', 'N', '\x3', '\x2', '\x2', '\x2', 
		'\x8F', '_', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', 'h', '\x3', '\x2', '\x2', '\x2', '\x8F', 'j', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', 'p', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'v', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x85', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\a', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x92', '\x5', '\n', '\x6', '\x2', '\x92', '\x93', '\a', '\f', '\x2', 
		'\x2', '\x93', '\x94', '\x5', '\n', '\x6', '\x2', '\x94', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x96', '\x5', '\xE', '\b', '\x2', '\x96', 
		'\x97', '\a', '\x19', '\x2', '\x2', '\x97', '\x98', '\x5', '\x2', '\x2', 
		'\x2', '\x98', '\v', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9C', '\a', 
		'\x37', '\x2', '\x2', '\x9A', '\x9B', '\a', '\x1A', '\x2', '\x2', '\x9B', 
		'\x9D', '\a', '\x37', '\x2', '\x2', '\x9C', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\b', '\b', '\x1', '\x2', 
		'\xA1', '\xA2', '\a', '\x16', '\x2', '\x2', '\xA2', '\xA3', '\x5', '\xE', 
		'\b', '\x2', '\xA3', '\xA4', '\a', '\x17', '\x2', '\x2', '\xA4', '\xE4', 
		'\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\t', '\x2', '\x2', '\x2', 
		'\xA6', '\xE4', '\x5', '\xE', '\b', '\xF', '\xA7', '\xA8', '\a', ',', 
		'\x2', '\x2', '\xA8', '\xAD', '\a', '\x37', '\x2', '\x2', '\xA9', '\xAA', 
		'\a', '\x3', '\x2', '\x2', '\xAA', '\xAB', '\x5', '\x16', '\f', '\x2', 
		'\xAB', '\xAC', '\a', '\x6', '\x2', '\x2', '\xAC', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\xAD', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\xE4', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xB0', '\a', ',', '\x2', '\x2', '\xB0', '\xB1', '\a', '\x37', 
		'\x2', '\x2', '\xB1', '\xB3', '\a', '\x16', '\x2', '\x2', '\xB2', '\xB4', 
		'\x5', '\x12', '\n', '\x2', '\xB3', '\xB2', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', 
		'\x2', '\x2', '\xB5', '\xE4', '\a', '\x17', '\x2', '\x2', '\xB6', '\xB7', 
		'\a', '\x37', '\x2', '\x2', '\xB7', '\xB8', '\a', '\x18', '\x2', '\x2', 
		'\xB8', '\xE4', '\a', '\x37', '\x2', '\x2', '\xB9', '\xBA', '\a', '\x37', 
		'\x2', '\x2', '\xBA', '\xC6', '\a', '\x18', '\x2', '\x2', '\xBB', '\xBD', 
		'\a', '\x37', '\x2', '\x2', '\xBC', '\xBE', '\a', '\x16', '\x2', '\x2', 
		'\xBD', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC1', 
		'\x5', '\x12', '\n', '\x2', '\xC0', '\xC2', '\a', '\x17', '\x2', '\x2', 
		'\xC1', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', 
		'\a', '\x37', '\x2', '\x2', '\xC4', '\xC5', '\a', '\x16', '\x2', '\x2', 
		'\xC5', '\xC7', '\a', '\x17', '\x2', '\x2', '\xC6', '\xBB', '\x3', '\x2', 
		'\x2', '\x2', '\xC6', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xE4', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\a', '\x37', '\x2', '\x2', 
		'\xC9', '\xCA', '\a', '-', '\x2', '\x2', '\xCA', '\xCB', '\x5', '\xE', 
		'\b', '\x2', '\xCB', '\xCC', '\a', '.', '\x2', '\x2', '\xCC', '\xE4', 
		'\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\a', '\x37', '\x2', '\x2', 
		'\xCE', '\xCF', '\a', '\x16', '\x2', '\x2', '\xCF', '\xE4', '\a', '\x17', 
		'\x2', '\x2', '\xD0', '\xD2', '\a', '/', '\x2', '\x2', '\xD1', '\xD3', 
		'\x5', '\x14', '\v', '\x2', '\xD2', '\xD1', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\xE4', '\x5', '\x2', '\x2', '\x2', '\xD5', '\xD7', 
		'\a', '-', '\x2', '\x2', '\xD6', '\xD8', '\x5', '\x12', '\n', '\x2', '\xD7', 
		'\xD6', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xE4', '\a', 
		'.', '\x2', '\x2', '\xDA', '\xE4', '\x5', '\x18', '\r', '\x2', '\xDB', 
		'\xDD', '\a', '\x37', '\x2', '\x2', '\xDC', '\xDE', '\a', '\x16', '\x2', 
		'\x2', '\xDD', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE1', '\x5', '\x12', '\n', '\x2', '\xE0', '\xE2', '\a', '\x17', '\x2', 
		'\x2', '\xE1', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xE3', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '\xE3', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xD0', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xDA', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xE4', '\x109', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\f', 
		'\x16', '\x2', '\x2', '\xE6', '\xE7', '\a', '\x1B', '\x2', '\x2', '\xE7', 
		'\x108', '\x5', '\xE', '\b', '\x17', '\xE8', '\xE9', '\f', '\x13', '\x2', 
		'\x2', '\xE9', '\xEA', '\t', '\x3', '\x2', '\x2', '\xEA', '\x108', '\x5', 
		'\xE', '\b', '\x14', '\xEB', '\xEC', '\f', '\x12', '\x2', '\x2', '\xEC', 
		'\xED', '\t', '\x4', '\x2', '\x2', '\xED', '\x108', '\x5', '\xE', '\b', 
		'\x13', '\xEE', '\xEF', '\f', '\x11', '\x2', '\x2', '\xEF', '\xF0', '\t', 
		'\x5', '\x2', '\x2', '\xF0', '\x108', '\x5', '\xE', '\b', '\x12', '\xF1', 
		'\xF2', '\f', '\x10', '\x2', '\x2', '\xF2', '\xF3', '\t', '\x6', '\x2', 
		'\x2', '\xF3', '\x108', '\x5', '\xE', '\b', '\x11', '\xF4', '\xF5', '\f', 
		'\b', '\x2', '\x2', '\xF5', '\xF6', '\a', '\r', '\x2', '\x2', '\xF6', 
		'\x108', '\x5', '\xE', '\b', '\t', '\xF7', '\xF8', '\f', '\x15', '\x2', 
		'\x2', '\xF8', '\xF9', '\a', '\x1C', '\x2', '\x2', '\xF9', '\xFA', '\a', 
		'\x16', '\x2', '\x2', '\xFA', '\xFB', '\a', '\x37', '\x2', '\x2', '\xFB', 
		'\x108', '\a', '\x17', '\x2', '\x2', '\xFC', '\xFD', '\f', '\x14', '\x2', 
		'\x2', '\xFD', '\xFE', '\a', '\x1D', '\x2', '\x2', '\xFE', '\xFF', '\a', 
		'\x16', '\x2', '\x2', '\xFF', '\x100', '\a', '\x37', '\x2', '\x2', '\x100', 
		'\x108', '\a', '\x17', '\x2', '\x2', '\x101', '\x102', '\f', '\x5', '\x2', 
		'\x2', '\x102', '\x103', '\a', '\x30', '\x2', '\x2', '\x103', '\x105', 
		'\x5', '\xE', '\b', '\x2', '\x104', '\x106', '\x5', '\x10', '\t', '\x2', 
		'\x105', '\x104', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x108', '\x3', '\x2', '\x2', '\x2', '\x107', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\x107', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\xEB', '\x3', '\x2', '\x2', '\x2', '\x107', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\xF1', '\x3', '\x2', '\x2', '\x2', '\x107', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\x107', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x107', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x108', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x109', '\x107', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\x3', 
		'\x2', '\x2', '\x2', '\x10A', '\xF', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', '\a', '\x31', '\x2', 
		'\x2', '\x10D', '\x10E', '\x5', '\xE', '\b', '\x2', '\x10E', '\x10F', 
		'\a', '\x1A', '\x2', '\x2', '\x10F', '\x110', '\x5', '\xE', '\b', '\x2', 
		'\x110', '\x11', '\x3', '\x2', '\x2', '\x2', '\x111', '\x116', '\x5', 
		'\xE', '\b', '\x2', '\x112', '\x113', '\a', '\f', '\x2', '\x2', '\x113', 
		'\x115', '\x5', '\xE', '\b', '\x2', '\x114', '\x112', '\x3', '\x2', '\x2', 
		'\x2', '\x115', '\x118', '\x3', '\x2', '\x2', '\x2', '\x116', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x116', '\x117', '\x3', '\x2', '\x2', '\x2', 
		'\x117', '\x13', '\x3', '\x2', '\x2', '\x2', '\x118', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x119', '\x11E', '\a', '\x37', '\x2', '\x2', '\x11A', 
		'\x11B', '\a', '\f', '\x2', '\x2', '\x11B', '\x11D', '\a', '\x37', '\x2', 
		'\x2', '\x11C', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x120', 
		'\x3', '\x2', '\x2', '\x2', '\x11E', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		'\x11E', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x120', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x121', 
		'\x122', '\a', '\x37', '\x2', '\x2', '\x122', '\x123', '\a', '\x32', '\x2', 
		'\x2', '\x123', '\x12A', '\x5', '\xE', '\b', '\x2', '\x124', '\x125', 
		'\a', '\f', '\x2', '\x2', '\x125', '\x126', '\a', '\x37', '\x2', '\x2', 
		'\x126', '\x127', '\a', '\x32', '\x2', '\x2', '\x127', '\x129', '\x5', 
		'\xE', '\b', '\x2', '\x128', '\x124', '\x3', '\x2', '\x2', '\x2', '\x129', 
		'\x12C', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x128', '\x3', '\x2', '\x2', 
		'\x2', '\x12A', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x12C', '\x12A', '\x3', '\x2', '\x2', '\x2', 
		'\x12D', '\x133', '\a', '\x35', '\x2', '\x2', '\x12E', '\x133', '\a', 
		'\x36', '\x2', '\x2', '\x12F', '\x133', '\a', '\x37', '\x2', '\x2', '\x130', 
		'\x133', '\a', '\x34', '\x2', '\x2', '\x131', '\x133', '\a', '\x33', '\x2', 
		'\x2', '\x132', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x132', '\x12E', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\x130', '\x3', '\x2', '\x2', '\x2', '\x132', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x133', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x1E', '%', '-', '\x32', '\x36', '\x44', 'X', ']', '|', '\x8F', '\x9E', 
		'\xAD', '\xB3', '\xBD', '\xC1', '\xC6', '\xD2', '\xD7', '\xDD', '\xE1', 
		'\xE3', '\x105', '\x107', '\x109', '\x116', '\x11E', '\x12A', '\x132',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
