//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from dyme.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="dymeParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface IdymeListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>scopedBlock</c>
	/// labeled alternative in <see cref="dymeParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterScopedBlock([NotNull] dymeParser.ScopedBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>scopedBlock</c>
	/// labeled alternative in <see cref="dymeParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitScopedBlock([NotNull] dymeParser.ScopedBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>loopBlock</c>
	/// labeled alternative in <see cref="dymeParser.loopblock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLoopBlock([NotNull] dymeParser.LoopBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>loopBlock</c>
	/// labeled alternative in <see cref="dymeParser.loopblock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLoopBlock([NotNull] dymeParser.LoopBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>declarationStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclarationStmt([NotNull] dymeParser.DeclarationStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>declarationStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclarationStmt([NotNull] dymeParser.DeclarationStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>forEachStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForEachStmt([NotNull] dymeParser.ForEachStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>forEachStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForEachStmt([NotNull] dymeParser.ForEachStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>whileStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStmt([NotNull] dymeParser.WhileStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>whileStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStmt([NotNull] dymeParser.WhileStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ifStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStmt([NotNull] dymeParser.IfStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ifStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStmt([NotNull] dymeParser.IfStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>importStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImportStmt([NotNull] dymeParser.ImportStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>importStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImportStmt([NotNull] dymeParser.ImportStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>matchStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchStmt([NotNull] dymeParser.MatchStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>matchStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchStmt([NotNull] dymeParser.MatchStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>moduleStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModuleStmt([NotNull] dymeParser.ModuleStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>moduleStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModuleStmt([NotNull] dymeParser.ModuleStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>typeStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeStmt([NotNull] dymeParser.TypeStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>typeStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeStmt([NotNull] dymeParser.TypeStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>enumStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumStmt([NotNull] dymeParser.EnumStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>enumStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumStmt([NotNull] dymeParser.EnumStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>classStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassStmt([NotNull] dymeParser.ClassStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>classStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassStmt([NotNull] dymeParser.ClassStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>assignmentStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentStmt([NotNull] dymeParser.AssignmentStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assignmentStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentStmt([NotNull] dymeParser.AssignmentStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>accessAssignmentStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAccessAssignmentStmt([NotNull] dymeParser.AccessAssignmentStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>accessAssignmentStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAccessAssignmentStmt([NotNull] dymeParser.AccessAssignmentStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprStmt([NotNull] dymeParser.ExprStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprStmt</c>
	/// labeled alternative in <see cref="dymeParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprStmt([NotNull] dymeParser.ExprStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dymeParser.matchparams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchparams([NotNull] dymeParser.MatchparamsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dymeParser.matchparams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchparams([NotNull] dymeParser.MatchparamsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dymeParser.matchparam"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatchparam([NotNull] dymeParser.MatchparamContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dymeParser.matchparam"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatchparam([NotNull] dymeParser.MatchparamContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dymeParser.enums"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnums([NotNull] dymeParser.EnumsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dymeParser.enums"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnums([NotNull] dymeParser.EnumsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AccessObjectFnExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAccessObjectFnExpr([NotNull] dymeParser.AccessObjectFnExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AccessObjectFnExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAccessObjectFnExpr([NotNull] dymeParser.AccessObjectFnExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Func</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunc([NotNull] dymeParser.FuncContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Func</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunc([NotNull] dymeParser.FuncContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NewClassObjExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewClassObjExpr([NotNull] dymeParser.NewClassObjExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NewClassObjExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewClassObjExpr([NotNull] dymeParser.NewClassObjExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeCheckExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeCheckExpr([NotNull] dymeParser.TypeCheckExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeCheckExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeCheckExpr([NotNull] dymeParser.TypeCheckExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConditionalExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionalExpr([NotNull] dymeParser.ConditionalExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConditionalExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionalExpr([NotNull] dymeParser.ConditionalExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RangeExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRangeExpr([NotNull] dymeParser.RangeExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RangeExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRangeExpr([NotNull] dymeParser.RangeExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryExpr([NotNull] dymeParser.UnaryExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryExpr([NotNull] dymeParser.UnaryExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IndexExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndexExpr([NotNull] dymeParser.IndexExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IndexExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndexExpr([NotNull] dymeParser.IndexExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FuncCall</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncCall([NotNull] dymeParser.FuncCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FuncCall</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncCall([NotNull] dymeParser.FuncCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MultiplicativeExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicativeExpr([NotNull] dymeParser.MultiplicativeExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiplicativeExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicativeExpr([NotNull] dymeParser.MultiplicativeExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AtomicExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtomicExpr([NotNull] dymeParser.AtomicExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AtomicExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtomicExpr([NotNull] dymeParser.AtomicExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ExponentialExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExponentialExpr([NotNull] dymeParser.ExponentialExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExponentialExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExponentialExpr([NotNull] dymeParser.ExponentialExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AdditiveExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditiveExpr([NotNull] dymeParser.AdditiveExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AdditiveExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditiveExpr([NotNull] dymeParser.AdditiveExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NewExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewExpr([NotNull] dymeParser.NewExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NewExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewExpr([NotNull] dymeParser.NewExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CastExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCastExpr([NotNull] dymeParser.CastExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CastExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCastExpr([NotNull] dymeParser.CastExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InListExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInListExpr([NotNull] dymeParser.InListExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InListExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInListExpr([NotNull] dymeParser.InListExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesizedExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedExpr([NotNull] dymeParser.ParenthesizedExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesizedExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedExpr([NotNull] dymeParser.ParenthesizedExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ListExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListExpr([NotNull] dymeParser.ListExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ListExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListExpr([NotNull] dymeParser.ListExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AccessObjectExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAccessObjectExpr([NotNull] dymeParser.AccessObjectExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AccessObjectExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAccessObjectExpr([NotNull] dymeParser.AccessObjectExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TestExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTestExpr([NotNull] dymeParser.TestExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TestExpr</c>
	/// labeled alternative in <see cref="dymeParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTestExpr([NotNull] dymeParser.TestExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dymeParser.option"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOption([NotNull] dymeParser.OptionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dymeParser.option"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOption([NotNull] dymeParser.OptionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dymeParser.params"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParams([NotNull] dymeParser.ParamsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dymeParser.params"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParams([NotNull] dymeParser.ParamsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dymeParser.args"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgs([NotNull] dymeParser.ArgsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dymeParser.args"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgs([NotNull] dymeParser.ArgsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dymeParser.assignArgs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignArgs([NotNull] dymeParser.AssignArgsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dymeParser.assignArgs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignArgs([NotNull] dymeParser.AssignArgsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IntegerAtom</c>
	/// labeled alternative in <see cref="dymeParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegerAtom([NotNull] dymeParser.IntegerAtomContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntegerAtom</c>
	/// labeled alternative in <see cref="dymeParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegerAtom([NotNull] dymeParser.IntegerAtomContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FloatAtom</c>
	/// labeled alternative in <see cref="dymeParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFloatAtom([NotNull] dymeParser.FloatAtomContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FloatAtom</c>
	/// labeled alternative in <see cref="dymeParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFloatAtom([NotNull] dymeParser.FloatAtomContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierAtom</c>
	/// labeled alternative in <see cref="dymeParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierAtom([NotNull] dymeParser.IdentifierAtomContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierAtom</c>
	/// labeled alternative in <see cref="dymeParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierAtom([NotNull] dymeParser.IdentifierAtomContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BooleanAtom</c>
	/// labeled alternative in <see cref="dymeParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanAtom([NotNull] dymeParser.BooleanAtomContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BooleanAtom</c>
	/// labeled alternative in <see cref="dymeParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanAtom([NotNull] dymeParser.BooleanAtomContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StringAtom</c>
	/// labeled alternative in <see cref="dymeParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringAtom([NotNull] dymeParser.StringAtomContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StringAtom</c>
	/// labeled alternative in <see cref="dymeParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringAtom([NotNull] dymeParser.StringAtomContext context);
}
